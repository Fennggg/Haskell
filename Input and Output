ghci>:t putStrLn  
putStrLn :: String -> IO ()
ghci>:t putStrLn "hello, world"  
putStrLn "hello, world" :: IO ()
ghci> :t getLine  
getLine :: IO String
ghci>putStrLn "HEEY"  
HEEY
ghci> 3 
3
ghci>print 3  
3
ghci> map (++"!") ["hey","ho","woo"]  
["hey!","ho!","woo!"]
ghci> print (map (++"!") ["hey","ho","woo"]) 
["hey!","ho!","woo!"]
ghci>sequence (map print [1,2,3,4,5]) 
1
2
3
4
5
[(),(),(),(),()]
ghci> mapM print [1,2,3]  
1
2
3
[(),(),()]
ghci>mapM_ print [1,2,3]  
1
2
3
ghci>import qualified Data.ByteString.Lazy as B  
ghci>import qualified Data.ByteString as S  
ghci>B.pack [99,97,110] 
"can"
ghci>B.pack [98..120] 
"bcdefghijklmnopqrstuvwx"
ghci> B.fromChunks [S.pack [40,41,42], S.pack [43,44,45], S.pack [46,47,48]]  
"()*+,-./0"
ghci>B.cons 85 $ B.pack [80,81,82,84]  
"UPQRT"
ghci>B.cons' 85 $ B.pack [80,81,82,84] 
"UPQRT"
ghci>foldr B.cons B.empty [50..60] 
"23456789:;<"
ghci>foldr B.cons' B.empty [50..60]  
"23456789:;<"
ghci>4 `div` 0  
*** Exception: divide by zero
ghci>head []  
*** Exception: Prelude.head: empty list
ghci>
