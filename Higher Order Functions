ghci>applyTwice f x = f (f x)  
ghci>applyTwice (+3) 10  
16
ghci>applyTwice (++ " HAHA") "HEY" 
"HEY HAHA HAHA"
ghci>applyTwice ("HAHA " ++) "HEY"  
"HAHA HAHA HEY"
ghci> applyTwice (multThree 2 2) 9  
144
ghci>applyTwice (3:) [1]  
[3,3,1]
ghci>max 4 5  
5
ghci>(max 4) 5 
5
ghci>zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]  

<interactive>:66:1: error:
    • Variable not in scope:
        zipWith' :: (a1 -> b1 -> c1) -> [a1] -> [b1] -> [c1]
    • Perhaps you meant one of these:
        ‘zipWith’ (imported from Prelude),
        ‘zipWith3’ (imported from Prelude)
ghci>zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys  
ghci>zipWith' (+) [4,2,5,6] [2,6,2,3]  
[6,8,7,9*** Exception: <interactive>:67:1-51: Non-exhaustive patterns in function zipWith'

ghci>zipWith' max [6,3,2,1] [7,3,1,5]  
[7,3,2,5*** Exception: <interactive>:67:1-51: Non-exhaustive patterns in function zipWith'

ghci>zipWith' _ [] _ = []  
ghci>zipWith' _ _ [] = []  
ghci>zipWith' (+) [4,2,5,6] [2,6,2,3] 
*** Exception: <interactive>:71:1-20: Non-exhaustive patterns in function zipWith'

ghci>flip' :: (a -> b -> c) -> b -> a -> c  

<interactive>:73:1: error:
    • Variable not in scope:
        flip' :: (a1 -> b1 -> c1) -> b1 -> a1 -> c1
    • Perhaps you meant ‘flip’ (imported from Prelude)
ghci>flip' f y x = f x y 
ghci>flip' zip [1,2,3,4,5] "hello"  
[('h',1),('e',2),('l',3),('l',4),('o',5)]
ghci>zipWith (flip' div) [2,2..] [10,8,6,4,2]  
[5,4,3,2,1]
ghci>map f (x:xs) = f x : map f xs 
ghci>map (+3) [1,5,3,1,6] 
[4,8,6,4,9*** Exception: <interactive>:77:1-29: Non-exhaustive patterns in function map

ghci>map (++ "!") ["BIFF", "BANG", "POW"]  
["BIFF!","BANG!","POW!"*** Exception: <interactive>:77:1-29: Non-exhaustive patterns in function map

ghci>map (replicate 3) [3..6]  
[[3,3,3],[4,4,4],[5,5,5],[6,6,6]*** Exception: <interactive>:77:1-29: Non-exhaustive patterns in function map

ghci>map :: (a -> b) -> [a] -> [b]  

<interactive>:81:1: error:
    • No instance for (Show ((a0 -> b0) -> [a0] -> [b0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
ghci>map _ [] = []  
ghci>map f (x:xs) = f x : map f xs  
ghci>map (+3) [1,5,3,1,6] 
[4,8,6,4,9*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>filter :: (a -> Bool) -> [a] -> [a]  

<interactive>:85:1: error:
    • No instance for (Show ((a0 -> Bool) -> [a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
ghci>filter _ [] = []  
ghci>filter p (x:xs)   

<interactive>:87:8: error: Variable not in scope: p

<interactive>:87:11: error:
    Variable not in scope: x :: (Integer, Integer)
ghci>    | p x       = x : filter p xs  

<interactive>:88:5: error: parse error on input ‘|’
ghci>    | otherwise = filter p xs  

<interactive>:89:5: error: parse error on input ‘|’
ghci>filter (>3) [1,5,3,2,1,6,4,3,2,1]  
*** Exception: <interactive>:86:1-16: Non-exhaustive patterns in function filter

ghci>sum (takeWhile (<10000) (filter odd (map (^2) [1..])))  
*** Exception: <interactive>:86:1-16: Non-exhaustive patterns in function filter

ghci>largestDivisible = head (filter p [100000,99999..])  

<interactive>:92:33: error: Variable not in scope: p
ghci>    where p x = x `mod` 3829 == 0  

<interactive>:93:5: error: parse error on input ‘where’
ghci>sum (takeWhile (<10000) (filter odd (map (^2) [1..])))  
*** Exception: <interactive>:86:1-16: Non-exhaustive patterns in function filter

ghci>chain :: (Integral a) => a -> [a]  

<interactive>:95:1: error:
    Variable not in scope: chain :: a1 -> [a1]
ghci>chain 1 = [1]  
ghci>chain n  

<interactive>:97:7: error: Variable not in scope: n :: Integer
ghci>    | even n =  n:chain (n `div` 2)  

<interactive>:98:5: error: parse error on input ‘|’
ghci>    | odd n  =  n:chain (n*3 + 1)  

<interactive>:99:5: error: parse error on input ‘|’
ghci>chain 10  
*** Exception: <interactive>:96:1-13: Non-exhaustive patterns in function chain

ghci>let listOfFuns = map (*) [0..]  
ghci> (listOfFuns !! 4) 5  
20
ghci>numLongChains :: Int 

<interactive>:103:1: error:
    Variable not in scope: numLongChains :: Int
ghci>numLongChains = length (filter (\xs -> length xs > 15) (map chain [1..100])) 
ghci>zipWith (\a b -> (a * 30 + 3) / b) [5,4,3,2,1] [1,2,3,4,5]  
[153.0,61.5,31.0,15.75,6.6]
ghci>map (\(a,b) -> a + b) [(1,2),(3,5),(6,3),(2,6),(2,5)]  
[3,8,9,8,7*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>sum' xs = foldl (\acc x -> acc + x) 0 xs  
ghci>sum' [3,5,2,1] 
11
ghci>scanl (+) 0 [3,5,2,1] 
[0,3,8,10,11]
ghci>scanr (+) 0 [3,5,2,1]  
[11,8,3,1,0]
ghci>scanl1 (\acc x -> if x > acc then x else acc) [3,4,5,3,7,9,2,1]  
[3,4,5,5,7,9,9,9]
ghci>scanl (flip (:)) [] [3,2,1]  
[[],[3],[2,3],[1,2,3]]
ghci>sqrtSums = length (takeWhile (<1000) (scanl1 (+) (map sqrt [1..]))) + 1 
ghci>sqrtSums 
131
ghci>sum (map sqrt [1..131])
*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>map ($ 3) [(4+), (10*), (^2), sqrt]  
[7.0,30.0,9.0,1.7320508075688772*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>(.) :: (b -> c) -> (a -> b) -> a -> c  

<interactive>:117:1: error:
    • No instance for (Show ((b0 -> c0) -> (a0 -> b0) -> a0 -> c0))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
ghci>f . g = \x -> f (g x)  
ghci> map (\x -> negate (abs x)) [5,-3,-6,7,-3,2,-19,24] 
[-5,-3,-6,-7,-3,-2,-19,-24*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>map (negate . abs) [5,-3,-6,7,-3,2,-19,24] 
[-5,-3,-6,-7,-3,-2,-19,-24*** Exception: <interactive>:83:1-29: Non-exhaustive patterns in function map

ghci>
