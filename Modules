ghci>import Data.List (nub, sort)  
ghci>import Data.List hiding (nub) 
ghci>import qualified Data.Map 
ghci>import qualified Data.Map as M  
ghci>intersperse '.' "MONKEY"  
"M.O.N.K.E.Y"
ghci>intersperse 0 [1,2,3,4,5,6]  
[1,0,2,0,3,0,4,0,5,0,6]
ghci>intercalate " " ["hey","there","guys"]  
"hey there guys"
ghci>intercalate [0,0,0] [[1,2,3],[4,5,6],[7,8,9]]  
[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]
ghci> transpose [[1,2,3],[4,5,6],[7,8,9]]  
[[1,4,7],[2,5,8],[3,6,9]]
ghci>transpose ["hey","there","guys"]  
["htg","ehu","yey","rs","e"]
ghci>map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]  
[18,8,6,17]
ghci>concat ["foo","bar","car"]  
"foobarcar"
ghci>concat [[3,4,5],[2,3,4],[2,1,1]] 
[3,4,5,2,3,4,2,1,1]
ghci> concatMap (replicate 4) [1..3] 
[1,1,1,1,2,2,2,2,3,3,3,3]
ghci>and $ map (>4) [5,6,7,8]  
True
ghci>and $ map (==4) [4,4,4,3,4]  
False
ghci>or $ map (==4) [2,3,4,5,6,1]
True
ghci> or $ map (>4) [1,2,3]  
False
ghci>any (==4) [2,3,5,6,1,4]  
True
ghci>all (>4) [6,9,10] 
True
ghci>all (`elem` ['A'..'Z']) "HEYGUYSwhatsup"  
False
ghci>any (`elem` ['A'..'Z']) "HEYGUYSwhatsup"
True
ghci>take 10 $ iterate (*2) 1  
[1,2,4,8,16,32,64,128,256,512]
ghci>take 3 $ iterate (++ "haha") "haha"  
["haha","hahahaha","hahahahahaha"]
ghci>splitAt 3 "heyman"  
("hey","man")
ghci>splitAt 100 "heyman" 
("heyman","")
ghci> splitAt (-3) "heyman"  
("","heyman")
ghci>let (a,b) = splitAt 3 "foobar" in b ++ a  
"barfoo"
ghci>takeWhile (>3) [6,5,4,3,2,1,2,3,4,5,4,3,2,1]  
[6,5,4]
ghci>takeWhile (/=' ') "This is a sentence"  
"This"
ghci>sum $ takeWhile (<10000) $ map (^3) [1..]  
53361
ghci>dropWhile (/=' ') "This is a sentence"
" is a sentence"
ghci>dropWhile (<3) [1,2,2,2,3,4,5,4,3,2,1]  
[3,4,5,4,3,2,1]
ghci>let stock = [(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),

<interactive>:38:83: error:
    parse error (possibly incorrect indentation or mismatched brackets)
ghci>[(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]  
[(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]
ghci>head (dropWhile (\(val,y,m,d) -> val < 1000) stock)  

<interactive>:40:46: error:
    Variable not in scope: stock :: [(a, b, c, d)]
ghci>let (fw, rest) = span (/=' ') "This is a sentence" in "First word:" ++ fw ++ ", the rest:" ++ rest
"First word:This, the rest: is a sentence"
ghci>break (==4) [1,2,3,4,5,6,7] 
([1,2,3],[4,5,6,7])
ghci>span (/=4) [1,2,3,4,5,6,7]  
([1,2,3],[4,5,6,7])
ghci>sort [8,5,3,2,1,6,4,2]  
[1,2,2,3,4,5,6,8]
ghci>sort "This will be sorted soon"  
"    Tbdeehiillnooorssstw"
ghci> group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]  
[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]
ghci> map (\l@(x:xs) -> (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]
[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]
ghci>inits "w00t"  
["","w","w0","w00","w00t"]
ghci>tails "w00t"  
["w00t","00t","0t","t",""]
ghci>let w = "w00t" in zip (inits w) (tails w)  
[("","w00t"),("w","00t"),("w0","0t"),("w00","t"),("w00t","")]
ghci>search :: (Eq a) => [a] -> [a] -> Bool  

<interactive>:51:1: error:
    Variable not in scope: search :: [a1] -> [a1] -> Bool
ghci>"cat" `isInfixOf` "im a cat burglar" 
True
ghci>"Cat" `isInfixOf` "im a cat burglar"  
False
ghci> "cats" `isInfixOf` "im a cat burglar"  
False
ghci>"hey" `isPrefixOf` "hey there!" 
True
ghci> "hey" `isPrefixOf` "oh hey there!"  
False
ghci> "there!" `isSuffixOf` "oh hey there!" 
True
ghci>"there!" `isSuffixOf` "oh hey there"  
False
ghci>partition (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"
("BOBMORGAN","sidneyeddy")
ghci>partition (>3) [1,3,5,6,3,2,1,0,3,7]  
([5,6,7],[1,3,3,2,1,0,3])
ghci>span (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"  
("BOB","sidneyMORGANeddy")
ghci>find (>4) [1,2,3,4,5,6]  
Just 5
ghci>find (>9) [1,2,3,4,5,6]
Nothing
ghci>:t find  
find :: Foldable t => (a -> Bool) -> t a -> Maybe a
ghci> :t elemIndex  
elemIndex :: Eq a => a -> [a] -> Maybe Int
ghci>4 `elemIndex` [1,2,3,4,5,6]  
Just 3
ghci>10 `elemIndex` [1,2,3,4,5,6]  
Nothing
ghci>' ' `elemIndices` "Where are the spaces?"  
[5,9,13]
ghci>findIndex (==4) [5,3,2,1,6,4]  
Just 5
ghci>findIndex (==7) [5,3,2,1,6,4]  
Nothing
ghci>findIndices (`elem` ['A'..'Z']) "Where Are The Caps?"
[0,6,10,14]
ghci>zipWith3 (\x y z -> x + y + z) [1,2,3] [4,5,2,2] [2,2,3]  
[7,9,8]
ghci>zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]  
[(2,2,5,2),(3,2,5,2),(3,2,3,2)]
ghci>lines "first line\nsecond line\nthird line" 
["first line","second line","third line"]
ghci>unlines ["first line", "second line", "third line"] 
"first line\nsecond line\nthird line\n"
ghci>words "hey these are the words in this sentence"  
["hey","these","are","the","words","in","this","sentence"]
ghci>words "hey these           are    the words in this\nsentence"  
["hey","these","are","the","words","in","this","sentence"]
ghci>unwords ["hey","there","mate"] 
"hey there mate"
ghci>nub [1,2,3,4,3,2,1,2,3,4,3,2,1]  
[1,2,3,4]
ghci>nub "Lots of words and stuff"  
"Lots fwrdanu"
ghci>delete 'h' "hey there ghang!"
"ey there ghang!"
ghci>delete 'h' . delete 'h' $ "hey there ghang!"  
"ey tere ghang!"
ghci>delete 'h' . delete 'h' . delete 'h' $ "hey there ghang!"
"ey tere gang!"
ghci>[1..10] \\ [2,5,9] 
[1,3,4,6,7,8,10]
ghci>"Im a big baby" \\ "big"  
"Im a  baby"
ghci> "hey man" `union` "man what's up"  
"hey manwt'sup"
ghci>[1..7] `union` [5..10]  
[1,2,3,4,5,6,7,8,9,10]
ghci>[1..7] `intersect` [5..10]  
[5,6,7]
ghci>insert 4 [3,5,1,2,8,2] 
[3,4,5,1,2,8,2]
ghci>insert 4 [1,3,4,4,1]  
[1,3,4,4,4,1]
ghci>insert 4 [1,2,3,5,6,7] 
[1,2,3,4,5,6,7]
ghci>insert 'g' $ ['a'..'f'] ++ ['h'..'z']  
"abcdefghijklmnopqrstuvwxyz"
ghci>insert 3 [1,2,4,3,2,1]  
[1,2,3,4,3,2,1]
ghci>let values = [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3]
ghci>groupBy (\x y -> (x > 0) == (y > 0)) values  
[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]
ghci>groupBy ((==) `on` (> 0)) values 
